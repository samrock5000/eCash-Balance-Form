{"version":3,"sources":["components/UsdPrice.js","components/Loading.js","components/CheckBalance.js","components/ShowTokens.js","components/Form.js","App.js","index.js"],"names":["bchjs","Loading","className","BCHJS","require","restURL","UsdPrice","balance","useState","loading","setLoading","result","setResult","GetPrice","a","Price","getBchaUsd","currentPrice","console","log","useEffect","length","map","item","x","Number","parseFloat","toFixed","CheckBalance","props","fromLegacyDecimals","amount","cashDecimals","amountBig","BigNumber","conversionFactor","times","toNumber","GetBalance","toEcashAdd","Address","ecashtoCashAddress","Electrumx","bchDenom","BitcoinCash","toBitcoinCash","confirmed","xecDenom","id","ShowTokens","tokenArray","setToken","getTokeninfo","toBcashAddr","SLP","toSLPAddress","toSlpAddr","Utils","balancesForAddress","slpInfo","list","tokenId","tokenInfo","TokDetails","name","symbol","blockCreated","Form","address","setAddress","searchValue","React","useRef","onSubmit","e","preventDefault","htmlFor","type","ref","value","placeholder","onChange","target","current","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e6abc391.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst NETWORK = \"mainnet\";\r\n\r\n// REST API servers.\r\n//const BCHN_MAINNET = \"https://bcha.fullstack.cash/v5/\";\r\nconst ABC_MAINNET = \"https://abc.fullstack.cash/v5/\";\r\nconst TESTNET3 = \"https://testnet3.fullstack.cash/v4/\";\r\n\r\n// bch-js-examples require code from the main bch-js repo\r\nconst BCHJS = require(\"@psf/bch-js\");\r\n\r\nlet bchjs;\r\nif (NETWORK === \"mainnet\") bchjs = new BCHJS({ restURL: ABC_MAINNET });\r\nelse bchjs = new BCHJS({ restURL: TESTNET3 });\r\n\r\nconst UsdPrice = (balance) => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [result, setResult] = useState([]);\r\n  //  console.log(balance)\r\n\r\n  const GetPrice = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      let currentPrice = await bchjs.Price.getBchaUsd();\r\n      const toXecDenom = currentPrice / 1000000;\r\n      const result = [toXecDenom * balance.balance];\r\n      //console.log(\"xecPrice=\", result);\r\n      console.log(currentPrice);\r\n      setLoading(false);\r\n      setResult(result);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    GetPrice();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading</h2>\r\n        <Loading />\r\n      </div>\r\n    );\r\n  }\r\n  if (result.length === 0) {\r\n    return (\r\n      <main>\r\n        <div className=\"section\">\r\n          <h2>N/A</h2>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  function decimals(x) {\r\n    return Number.parseFloat(x).toFixed(2);\r\n  }\r\n\r\n  return result.map((item) => {\r\n    return (\r\n      <div key={item}>\r\n        <h2 className=\"section\">USD: ${decimals(result)}</h2>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default UsdPrice;\r\n","import React from \"react\";\r\n\r\nconst Loading = () => {\r\n  return <div className=\"loading\"></div>;\r\n};\r\n\r\nexport default Loading;\r\n","//Set NETWORK to either testnet or mainnet\r\n\r\nimport React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Loading from \"./Loading\";\r\nimport UsdPrice from \"./UsdPrice\";\r\nimport BigNumber from \"bignumber.js\";\r\n\r\nconst CheckBalance = (props) => {\r\n  //console.log(props)\r\n  const NETWORK = \"mainnet\";\r\n\r\n  // REST API servers.\r\n  //const BCHN_MAINNET = \"https://api.fullstack.cash/v5/\";\r\n  const ABC_MAINNET = \"https://abc.fullstack.cash/v4/\";\r\n  const TESTNET3 = \"https://testnet3.fullstack.cash/v4/\";\r\n\r\n  // bch-js-examples require code from the main bch-js repo\r\n  const BCHJS = require(\"@psf/bch-js\");\r\n\r\n  // Instantiate bch-js based on the network.\r\n  let bchjs;\r\n  if (NETWORK === \"mainnet\") bchjs = new BCHJS({ restURL: ABC_MAINNET });\r\n  else bchjs = new BCHJS({ restURL: TESTNET3 });\r\n\r\n  const [loading, setLoading] = useState(true);\r\n  const [result, setResult] = useState([]);\r\n\r\n  const fromLegacyDecimals = (amount, cashDecimals) => {\r\n    // Input 0.00000546 BCH\r\n    // Output 5.46 XEC or 0.00000546 BCH, depending on currency.cashDecimals\r\n    //const cashDecimals = 2;\r\n    const amountBig = new BigNumber(amount);\r\n    const conversionFactor = new BigNumber(10 ** (8 - cashDecimals));\r\n    const amountSmallestDenomination = amountBig\r\n      .times(conversionFactor)\r\n      .toNumber();\r\n    return amountSmallestDenomination;\r\n  };\r\n\r\n  //Get the balance of the wallet.\r\n  const GetBalance = async () => {\r\n    setLoading(true);\r\n\r\n    console.log(props);\r\n\r\n    // first get BCH balance\r\n    try {\r\n      const toEcashAdd = bchjs.Address.ecashtoCashAddress(props.props);\r\n      const balance = await bchjs.Electrumx.balance(toEcashAdd);\r\n      const bchDenom = bchjs.BitcoinCash.toBitcoinCash(\r\n        balance.balance.confirmed\r\n      );\r\n      const xecDenom = fromLegacyDecimals(bchDenom, 2);\r\n      const result = [xecDenom];\r\n\r\n      console.log(result);\r\n      setLoading(false);\r\n      setResult(result);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    GetBalance();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading</h2>\r\n        <Loading />\r\n      </div>\r\n    );\r\n  }\r\n  if (result.length === 0) {\r\n    return (\r\n      <main>\r\n        <div className=\"section\">\r\n          <h2>No XEC Found</h2>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return result.map((item) => {\r\n    return (\r\n      <div id=\"body\">\r\n        <div key={item.id}>\r\n          <h2 className=\"section\">\r\n            Balance: {result}\r\n            <h2>\r\n              <UsdPrice balance={result} />\r\n            </h2>\r\n          </h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  });\r\n};\r\n\r\nexport default CheckBalance;\r\n","import React from \"react\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport Loading from \"./Loading\";\r\n\r\nfunction ShowTokens(props) {\r\n  const BCHJS = require(\"@psf/bch-js\");\r\n  const NETWORK = \"mainnet\";\r\n  // REST API servers.\r\n  // const BCHN_MAINNET = \"https://api.fullstack.cash/v5/\";\r\n  const ABC_MAINNET = \"https://abc.fullstack.cash/v5/\";\r\n  const TESTNET3 = \"https://testnet3.fullstack.cash/v4/\";\r\n\r\n  let bchjs;\r\n  if (NETWORK === \"mainnet\") bchjs = new BCHJS({ restURL: ABC_MAINNET });\r\n  else bchjs = new BCHJS({ restURL: TESTNET3 });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [tokenArray, setToken] = useState([]);\r\n  //Get the balance of the address.\r\n  const getTokeninfo = async () => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      const toBcashAddr = bchjs.Address.ecashtoCashAddress(props.props);\r\n      //console.log(toEcashAdd);\r\n      const toSlpAddr = await bchjs.SLP.Address.toSLPAddress(toBcashAddr);\r\n      const slpInfo = await bchjs.SLP.Utils.balancesForAddress(toSlpAddr);\r\n\r\n      const tokenInfo = await bchjs.SLP.Utils.list(slpInfo[0].tokenId);\r\n      console.log(slpInfo);\r\n      //  const tokenTostring = JSON.stringify(tokenInfo, null, 2)\r\n\r\n      // console.log(tokenInfo)\r\n      const TokDetails = {\r\n        name: tokenInfo.name,\r\n        symbol: tokenInfo.symbol,\r\n        balance: slpInfo[0].balance,\r\n        blockCreated: tokenInfo.blockCreated,\r\n      };\r\n      const tokenArray = [TokDetails];\r\n\r\n      setLoading(false);\r\n      setToken(tokenArray);\r\n    } catch (error) {\r\n      setLoading(false);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTokeninfo();\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return (\r\n      <div>\r\n        <h2>Loading eToken info</h2>\r\n        <Loading />\r\n      </div>\r\n    );\r\n  }\r\n  if (tokenArray.length === 0) {\r\n    return (\r\n      <main>\r\n        <div className=\"section\">\r\n          <h2>No eToken info</h2>\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n\r\n  return tokenArray.map((item) => {\r\n    return (\r\n      <div key={item.id}>\r\n        <h2 className=\"section2\">eToken: {item.name}</h2>\r\n        <h3 className=\"h3\">Symbol: {item.symbol}</h3>\r\n        <h3 className=\"h3\">Balance: {item.balance}</h3>\r\n        <ul className=\"h3\">BlockCreated: {item.blockCreated}</ul>\r\n      </div>\r\n    );\r\n  });\r\n}\r\n\r\nexport default ShowTokens;\r\n","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport CheckBalance from \"./CheckBalance\";\r\nimport ShowTokens from \"./ShowTokens\";\r\n\r\nfunction Form() {\r\n  const [address, setAddress] = useState(\"\");\r\n  const searchValue = React.useRef(address);\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    //console.log(searchValue.current.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form className=\"search-form\" onSubmit={handleSubmit}>\r\n        <h2>eCash Address Balance</h2>\r\n        <label htmlFor=\"address\"></label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"address\"\r\n          ref={searchValue}\r\n          value={address}\r\n          placeholder=\"enter address\"\r\n          className=\"form-input\"\r\n          onChange={(e) => setAddress(e.target.value)}\r\n        />\r\n        {/* <div className=\"btn-container\">\r\n        <button type='submit' className='btn-container button'>SUBMIT</button>\r\n       \r\n        </div>  */}\r\n      </form>\r\n      <div>\r\n        {address === \"\" ? (\r\n          <span className=\"section\"></span>\r\n        ) : (\r\n          <div className=\"section2\">\r\n            <div className=\"btn-container2 button\">\r\n              <div>\r\n                <CheckBalance props={searchValue.current.value} />\r\n                <ShowTokens props={searchValue.current.value} />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"btn-container2 button\">\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn-container2 button\"\r\n                onClick={() => {\r\n                  setAddress(\"\");\r\n                }}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n","import Form from \"./components/Form\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"section\">\r\n      <div className=\"App\">\r\n        <Form />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}